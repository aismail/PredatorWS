commit fbe2d5df68d2879e8c93fe35597de0a299b4e503
Author: Andrei-Adnan Ismail <iandrei@gmail.com>
Date:   Wed Jun 1 17:11:50 2011 +0300

    Prepared OpenTLD for usage within a C app as a stand-alone library.

diff --git a/img/img_get_from_file.m b/img/img_get_from_file.m
new file mode 100644
index 0000000..9f2969f
--- /dev/null
+++ b/img/img_get_from_file.m
@@ -0,0 +1,3 @@
+function img = img_get_from_file(file_name)
+    img = img_alloc(file_name);
+end
\ No newline at end of file
diff --git a/run_TLD.m b/run_TLD.m
index d47a2de..e69c3c5 100644
--- a/run_TLD.m
+++ b/run_TLD.m
@@ -14,37 +14,10 @@
 % 
 % You should have received a copy of the GNU General Public License
 % along with TLD.  If not, see <http://www.gnu.org/licenses/>.
-
+        
+% Run TLD -----------------------------------------------------------------
 if (~isdeployed)
 addpath(genpath('.')); init_workspace;
 end
 
-opt.source          = struct('camera',1,'input','_input/','bb0',[]); % camera/directory swith, directory_name, initial_bounding_box (if empty, it will be selected by the user)
-opt.output          = '_output/'; mkdir(opt.output); % output directory that will contain bounding boxes + confidence
-
-min_win             = 24; % minimal size of the object's bounding box in the scanning grid, it may significantly influence speed of TLD, set it to minimal size of the object
-patchsize           = [15 15]; % size of normalized patch in the object detector, larger sizes increase discriminability, must be square
-fliplr              = 0; % if set to one, the model automatically learns mirrored versions of the object
-maxbbox             = 1; % fraction of evaluated bounding boxes in every frame, maxbox = 0 means detector is truned off, if you don't care about speed set it to 1
-update_detector     = 1; % online learning on/off, of 0 detector is trained only in the first frame and then remains fixed
-opt.plot            = struct('pex',1,'nex',1,'dt',1,'confidence',1,'target',1,'replace',0,'drawoutput',3,'draw',0,'pts',1,'help', 0,'patch_rescale',1,'save',0); 
-
-% Do-not-change -----------------------------------------------------------
-
-opt.model           = struct('min_win',min_win,'patchsize',patchsize,'fliplr',fliplr,'ncc_thesame',0.95,'valid',0.5,'num_trees',10,'num_features',13,'thr_fern',0.5,'thr_nn',0.65,'thr_nn_valid',0.7);
-opt.p_par_init      = struct('num_closest',10,'num_warps',20,'noise',5,'angle',20,'shift',0.02,'scale',0.02); % synthesis of positive examples during initialization
-opt.p_par_update    = struct('num_closest',10,'num_warps',10,'noise',5,'angle',10,'shift',0.02,'scale',0.02); % synthesis of positive examples during update
-opt.n_par           = struct('overlap',0.2,'num_patches',100); % negative examples initialization/update
-opt.tracker         = struct('occlusion',10);
-opt.control         = struct('maxbbox',maxbbox,'update_detector',update_detector,'drop_img',1,'repeat',1);
-
-        
-% Run TLD -----------------------------------------------------------------
-%profile on;
-[bb,conf] = tldExample(opt);
-%profile off;
-%profile viewer;
-
-% Save results ------------------------------------------------------------
-dlmwrite([opt.output '/tld.txt'],[bb; conf]');
-disp('Results saved to ./_output.');
+tldExample();
diff --git a/tld/tldExample.m b/tld/tldExample.m
index 71d9fb8..7d3d0de 100644
--- a/tld/tldExample.m
+++ b/tld/tldExample.m
@@ -15,51 +15,18 @@
 % You should have received a copy of the GNU General Public License
 % along with TLD.  If not, see <http://www.gnu.org/licenses/>.
 
-function [bb,conf] = tldExample(opt)
+function tldExample()
 
 global tld; % holds results and temporal variables
 
 % INITIALIZATION ----------------------------------------------------------
 
-opt.source = tldInitSource(opt.source); % select data source, camera/directory
-
-figure(2); set(2,'KeyPressFcn', @handleKey); % open figure for display of results
-finish = 0; function handleKey(~,~), finish = 1; end % by pressing any key, the process will exit
-
-while 1
-    source = tldInitFirstFrame(tld,opt.source,opt.model.min_win); % get initial bounding box, return 'empty' if bounding box is too small
-    if ~isempty(source), opt.source = source; break; end % check size
-end
-
-tld = tldInit(opt,[]); % train initial detector and initialize the 'tld' structure
-tld = tldDisplay(0,tld); % initialize display
+tldExampleInitDefault()
 
 % RUN-TIME ----------------------------------------------------------------
 
 for i = 2:length(tld.source.idx) % for every frame
-    
-    tld = tldProcessFrame(tld,i); % process frame i
-    tldDisplay(1,tld,i); % display results on frame i
-    
-    if finish % finish if any key was pressed
-        if tld.source.camera
-            stoppreview(tld.source.vid);
-            closepreview(tld.source.vid);
-             close(1);
-        end
-        close(2);
-        bb = tld.bb; conf = tld.conf; % return results
-        return;
-    end
-    
-    if tld.plot.save == 1
-        img = getframe;
-        imwrite(img.cdata,[tld.output num2str(i,'%05d') '.png']);
-    end
-        
-    
+    tldProcessSingleFrame();
 end
 
-bb = tld.bb; conf = tld.conf; % return results
-
 end
\ No newline at end of file
diff --git a/tld/tldExampleInit.m b/tld/tldExampleInit.m
new file mode 100644
index 0000000..06990a6
--- /dev/null
+++ b/tld/tldExampleInit.m
@@ -0,0 +1,15 @@
+function tldExampleInit(opt)
+
+global tld;
+
+opt.source = tldInitSource(opt.source); % select data source, camera/directory
+opt.source.idx = 1:10000; 
+
+while 1
+    source = tldInitFirstFrame(tld,opt.source,opt.model.min_win); % get initial bounding box, return 'empty' if bounding box is too small
+    if ~isempty(source), opt.source = source; break; end % check size
+end
+
+tld = tldInit(opt,[]); % train initial detector and initialize the 'tld' structure
+
+end
\ No newline at end of file
diff --git a/tld/tldExampleInitDefault.m b/tld/tldExampleInitDefault.m
new file mode 100644
index 0000000..f67c446
--- /dev/null
+++ b/tld/tldExampleInitDefault.m
@@ -0,0 +1,25 @@
+function tldExampleInitDefault()
+
+%opt.source          = struct('camera',1,'input','_input/','bb0',[]); % camera/directory swith, directory_name, initial_bounding_box (if empty, it will be selected by the user)
+opt.source          = struct('camera',0,'input','_input/','bb0',[]); % camera/directory swith, directory_name, initial_bounding_box (if empty, it will be selected by the user)
+opt.output          = '_output/'; mkdir(opt.output); % output directory that will contain bounding boxes + confidence
+
+min_win             = 24; % minimal size of the object's bounding box in the scanning grid, it may significantly influence speed of TLD, set it to minimal size of the object
+patchsize           = [15 15]; % size of normalized patch in the object detector, larger sizes increase discriminability, must be square
+fliplr              = 0; % if set to one, the model automatically learns mirrored versions of the object
+maxbbox             = 1; % fraction of evaluated bounding boxes in every frame, maxbox = 0 means detector is truned off, if you don't care about speed set it to 1
+update_detector     = 1; % online learning on/off, of 0 detector is trained only in the first frame and then remains fixed
+opt.plot            = struct('pex',1,'nex',1,'dt',1,'confidence',1,'target',1,'replace',0,'drawoutput',3,'draw',0,'pts',1,'help', 0,'patch_rescale',1,'save',0); 
+
+% Do-not-change -----------------------------------------------------------
+
+opt.model           = struct('min_win',min_win,'patchsize',patchsize,'fliplr',fliplr,'ncc_thesame',0.95,'valid',0.5,'num_trees',10,'num_features',13,'thr_fern',0.5,'thr_nn',0.65,'thr_nn_valid',0.7);
+opt.p_par_init      = struct('num_closest',10,'num_warps',20,'noise',5,'angle',20,'shift',0.02,'scale',0.02); % synthesis of positive examples during initialization
+opt.p_par_update    = struct('num_closest',10,'num_warps',10,'noise',5,'angle',10,'shift',0.02,'scale',0.02); % synthesis of positive examples during update
+opt.n_par           = struct('overlap',0.2,'num_patches',100); % negative examples initialization/update
+opt.tracker         = struct('occlusion',10);
+opt.control         = struct('maxbbox',maxbbox,'update_detector',update_detector,'drop_img',1,'repeat',1);
+
+tldExampleInit(opt);
+
+end
\ No newline at end of file
diff --git a/tld/tldInitFirstFrame.m b/tld/tldInitFirstFrame.m
index 435bca8..a16f344 100644
--- a/tld/tldInitFirstFrame.m
+++ b/tld/tldInitFirstFrame.m
@@ -18,12 +18,13 @@
 function source = tldInitFirstFrame(tld,source,min_win)
 
 % load the first frame into memory
-source.im0  = img_get(source,source.idx(1));
+file_name = 'temp/temp/frame.png';
+source.im0 = img_get_from_file(file_name);
 
 % set the initial bounding box: 
 % - from file
-if source.camera == 0 && exist([source.input '/temp/temp/temp/temp/init.txt'],'file')
-    bb = dlmread([source.input '/temp/temp/temp/temp/init.txt']);
+if source.camera == 0 && exist('temp/temp/temp/temp/init.txt','file')
+    bb = dlmread('temp/temp/temp/temp/init.txt');
     source.bb = bb(:);
     
     % check
@@ -39,5 +40,3 @@ else
        source = [];
     end
 end
-
-
diff --git a/tld/tldKeyPressHandler.m b/tld/tldKeyPressHandler.m
new file mode 100644
index 0000000..18eb5f2
--- /dev/null
+++ b/tld/tldKeyPressHandler.m
@@ -0,0 +1,9 @@
+function tldKeyPressHandler()
+
+global finish;
+
+finish = 0; 
+set(2,'KeyPressFcn', @handleKey);
+function handleKey(~,~), finish = 1; end % by pressing any key, the process will exit
+
+end
\ No newline at end of file
diff --git a/tld/tldProcessFrame.m b/tld/tldProcessFrame.m
index 8e34c5f..e54991c 100644
--- a/tld/tldProcessFrame.m
+++ b/tld/tldProcessFrame.m
@@ -15,10 +15,10 @@
 % You should have received a copy of the GNU General Public License
 % along with TLD.  If not, see <http://www.gnu.org/licenses/>.
 
-function tld = tldProcessFrame(tld,i)
+function tld = tldProcessFrame(tld,i,frame)
 
 I = tld.source.idx(i); % get current index
-tld.img{I} = img_get(tld.source,I); % grab frame from camera / load image
+tld.img{I} = frame; % grab frame from camera / load image
 
 % TRACKER  ----------------------------------------------------------------
 
diff --git a/tld/tldProcessSingleFrame.m b/tld/tldProcessSingleFrame.m
new file mode 100644
index 0000000..7ba0025
--- /dev/null
+++ b/tld/tldProcessSingleFrame.m
@@ -0,0 +1,17 @@
+function tldProcessSingleFrame()
+    global tld;
+    persistent i;
+
+    if isempty(i)
+        i = 1;
+    end;
+    i = i + 1;
+    
+    file_name = 'temp/temp/frame.png';
+    frame = img_get_from_file(file_name);
+    tld = tldProcessFrame(tld,i,frame); % process frame i    
+    bb = tld.bb(:,i);
+    
+    delete('bb.txt')
+    dlmwrite('bb.txt', bb);
+end
\ No newline at end of file
